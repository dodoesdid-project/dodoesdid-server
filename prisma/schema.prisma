generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailAuth {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String
  code          String        @unique
  used          Boolean       @default(false)
  emailAuthType EmailAuthType @map("email_auth_type")
  createAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt      DateTime      @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)

  @@unique([email, emailAuthType])
  @@map("email_auth")
}

enum EmailAuthType {
  SIGNIN
  PASSWORD
}

model User {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String    @unique
  password         String?
  name             String
  birth            DateTime?
  phone            String?   @unique
  createAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt         DateTime  @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)
  isWithdrawal     Boolean   @default(false)
  withdrawalAt     DateTime? @db.Timestamptz(6)
  withdrawalReason String?

  userProfile    UserProfile?
  socialAccounts SocialAccount[]
  groupsOnUsers  GroupsOnUsers[]
  dazims         Dazim[]
  dazimComments  DazimComment[]
  dazimReactions DazimReaction[]

  @@map("user")
}

model UserProfile {
  id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String? @unique @map("user_id") @db.Uuid
  nickName  String? @map("nick_name")
  thumbnail String? @map("thumbnail")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model SocialAccount {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  socialId String   @unique @map("social_id")
  provider Provider
  createAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt DateTime @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([socialId, provider])
  @@map("social_account")
}

enum Provider {
  KAKAO
  GOOGLE
}

model GroupsOnUsers {
  userId   String   @map("user_id") @db.Uuid
  groupId  String   @map("group_id") @db.Uuid
  order    Int      @default(0)
  createAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt DateTime @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("groups_on_users")
}

model Group {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  thumbnail  String
  notice     String?
  inviteCode String   @unique
  createAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt   DateTime @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)

  groupsOnUsers GroupsOnUsers[]
  dazims        Dazim[]

  @@map("group")
}

model Dazim {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String
  photo      String?
  isSuccess  Boolean  @default(false)
  createAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  createDate DateTime @default(now()) @map("create_date") @db.Date
  updateAt   DateTime @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)
  userId     String   @db.Uuid
  groupId    String   @db.Uuid

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  group          Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  dazimComments  DazimComment[]
  dazimReactions DazimReaction[]

  @@unique([userId, groupId, createDate])
  @@map("dazim")
}

model DazimComment {
  id       String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content  String
  createAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updateAt DateTime       @default(now()) @updatedAt @map("update_at") @db.Timestamptz(6)
  userId   String         @db.Uuid
  dazimId  String         @db.Uuid
  parentId String?        @db.Uuid
  replies  DazimComment[] @relation("dazim_comment_replies")

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dazim  Dazim         @relation(fields: [dazimId], references: [id], onDelete: Cascade)
  parent DazimComment? @relation("dazim_comment_replies", fields: [parentId], references: [id], onDelete: Cascade)

  @@map("dazim_comment")
}

model DazimReaction {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reactionType ReactionType
  dazimId      String       @db.Uuid
  userId       String       @db.Uuid

  dazim Dazim @relation(fields: [dazimId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([dazimId, reactionType, userId])
  @@map("dazim_reactions")
}

enum ReactionType {
  FIRE
  STAR
  CONGRATULATIONS
  HEART
  MUSIC
}
